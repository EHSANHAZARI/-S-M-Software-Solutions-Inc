// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMSS.Data;

#nullable disable

namespace SMSS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230526163009_NumberOfEnrolledCandidateTable")]
    partial class NumberOfEnrolledCandidateTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "eaefa2b9-d386-4fbf-a645-d78162c492b4",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e58baf18-afb4-4017-b3db-b940f4a508c6",
                            Name = "User",
                            NormalizedName = "user"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "88d29df4-bc09-4e0f-a968-9dc23073f69f",
                            Name = "Recruiter",
                            NormalizedName = "recruiter"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SMSS.Models.ApplicantEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantProfileId")
                        .HasColumnType("int")
                        .HasColumnName("Applicant_Profile_ID");

                    b.Property<string>("CertificateDiploma")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Certificate_Diploma");

                    b.Property<int?>("CompletionYear")
                        .HasColumnType("int")
                        .HasColumnName("Completion_Year");

                    b.Property<bool>("IsInProgress")
                        .HasColumnType("bit")
                        .HasColumnName("Is_In_Progress");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Major");

                    b.Property<int>("StartYear")
                        .HasColumnType("int")
                        .HasColumnName("Start_Year");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantProfileId");

                    b.ToTable("Applicant_Educations");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantJobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApplicantProfileId")
                        .HasColumnType("int")
                        .HasColumnName("Applicant_Profile_ID");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Application_Date");

                    b.Property<int>("ApplicationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Application_Status");

                    b.Property<int?>("CompanyJobId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Job_Id");

                    b.Property<string>("CoverLetterLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CoverLetter_Location");

                    b.Property<bool>("DeleteFlag")
                        .HasColumnType("bit")
                        .HasColumnName("Delete_Flag");

                    b.Property<string>("ExpectedSalary")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Expected_Salary");

                    b.Property<string>("ResumeLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Resume_Location");

                    b.Property<string>("SkillMatrixLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Skill_Matrix_Location");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantProfileId");

                    b.HasIndex("CompanyJobId");

                    b.ToTable("Applicant_Job_Applications");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicLevel")
                        .HasColumnType("int")
                        .HasColumnName("Academic_Level");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("City_ID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<string>("GitHub")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GitHub_URL");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Job_Title");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LinkedIn_URL");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Zip_Postal_Code");

                    b.Property<byte[]>("ProfileImg")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Profile_Img");

                    b.Property<bool>("ProfileIsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("Profile_Is_Public");

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Profile_URL");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("Province_ID");

                    b.Property<int>("RegisteredUserId")
                        .HasColumnType("int")
                        .HasColumnName("Registered_User_ID");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("RegistrationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ResumeLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Resume_Location");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Street_Address");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegisteredUserId")
                        .IsUnique();

                    b.ToTable("Applicant_Profiles");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantProfileId")
                        .HasColumnType("int")
                        .HasColumnName("Applicant_Profile_ID");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SkillName");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantProfileId");

                    b.ToTable("Applicant_Skills");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantTestimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantProfileId")
                        .HasColumnType("int")
                        .HasColumnName("Applicant_Profile_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit")
                        .HasColumnName("IsApprove");

                    b.Property<string>("Testimonial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Testimonial");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantProfileId");

                    b.ToTable("Applicant_Testimonial");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantWorkHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantProfileId")
                        .HasColumnType("int")
                        .HasColumnName("Applicant_Profile_ID");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Company_Name");

                    b.Property<short?>("EndMonth")
                        .HasColumnType("smallint");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int")
                        .HasColumnName("End_Year");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Present");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Job_Description");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Job_Title");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Location");

                    b.Property<short>("StartMonth")
                        .HasColumnType("smallint")
                        .HasColumnName("Start_Month");

                    b.Property<int>("StartYear")
                        .HasColumnType("int")
                        .HasColumnName("Start_Year");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantProfileId");

                    b.ToTable("Applicant_Work_History");
                });

            modelBuilder.Entity("SMSS.Models.CarouselSliderImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CSImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Carousel_Button_Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Carousel_Button_URL")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Content_Caption")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Heading_Content")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("CarouselSliderImages");
                });

            modelBuilder.Entity("SMSS.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("City_Name");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("Province_ID");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SMSS.Models.CompanyJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("City_ID");

                    b.Property<int>("CompanyProfileId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Profile_ID");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Expire_Date");

                    b.Property<string>("FileAttachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("File_Attachment");

                    b.Property<bool>("IsAttachmentRequired")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Attachment_Required");

                    b.Property<bool>("IsCompanyHidden")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Company_Hidden");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Inactive");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Job_Description");

                    b.Property<int>("JobExperience")
                        .HasColumnType("int")
                        .HasColumnName("Job_Experience");

                    b.Property<int?>("JobModeId")
                        .HasColumnType("int")
                        .HasColumnName("Job_Mode_ID");

                    b.Property<int>("JobQualification")
                        .HasColumnType("int")
                        .HasColumnName("Job_Qualification");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Job_Title");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Zip_Postal_Code");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Posting_Date");

                    b.Property<int?>("ProvinceDemoFileAttachmentId")
                        .HasColumnType("int")
                        .HasColumnName("Province_Demo_File_Attachment_ID");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("Province_ID");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Street_Address");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyProfileId");

                    b.HasIndex("CountryId");

                    b.HasIndex("JobModeId");

                    b.HasIndex("ProvinceDemoFileAttachmentId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Company_Jobs");
                });

            modelBuilder.Entity("SMSS.Models.CompanyJobSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyJobId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Job_ID");

                    b.Property<int>("SectorId")
                        .HasColumnType("int")
                        .HasColumnName("Sector_ID");

                    b.HasKey("Id");

                    b.HasIndex("CompanyJobId");

                    b.HasIndex("SectorId");

                    b.ToTable("CompanyJobSectors");
                });

            modelBuilder.Entity("SMSS.Models.CompanyLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("City_ID");

                    b.Property<int>("CompanyProfileId")
                        .HasColumnType("int")
                        .HasColumnName("Company_ID");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Zip_Postal_Code");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("Province_ID");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Street_Address");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyProfileId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Company_Locations");
                });

            modelBuilder.Entity("SMSS.Models.CompanyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("CompanyLogo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Company_Logo");

                    b.Property<string>("CompanyWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company_Website");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Contact_Name");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("Contact_Phone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("Description");

                    b.Property<string>("Email1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email1");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Approved");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Inactive");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LinkedInURL");

                    b.Property<int>("RegisteredUserId")
                        .HasColumnType("int")
                        .HasColumnName("Registered_User_ID");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("RegistrationDate")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredUserId")
                        .IsUnique();

                    b.ToTable("Company_Profiles");
                });

            modelBuilder.Entity("SMSS.Models.ContactusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactusModels");
                });

            modelBuilder.Entity("SMSS.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 2,
                            Name = "USA"
                        });
                });

            modelBuilder.Entity("SMSS.Models.EnrolledCandidatesCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentNumOfEnrolledCandidates")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EnrolledCandidatesCounts");
                });

            modelBuilder.Entity("SMSS.Models.HiringClientLogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Client_Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Client_Province")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date Added");

                    b.Property<string>("Hiring_Client_Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HiringClientLogos");
                });

            modelBuilder.Entity("SMSS.Models.JobMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("JobModeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Job_Mode_Name");

                    b.HasKey("Id");

                    b.ToTable("JobModes");
                });

            modelBuilder.Entity("SMSS.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    b.Property<string>("ProvinceAbbreviation")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("Province_Abbreviation");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Province_Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("SMSS.Models.ProvinceDemoFileAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("varbinary(MAX)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("File_Name");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Province_Name");

                    b.HasKey("Id");

                    b.ToTable("ProvinceDemoFileAttachments");
                });

            modelBuilder.Entity("SMSS.Models.RegisteredUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ResidencyStatus")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<byte>("UserFlag")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("RegisteredUsers", (string)null);
                });

            modelBuilder.Entity("SMSS.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Sector_Name");

                    b.HasKey("Id");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SectorName = "Application Developer"
                        },
                        new
                        {
                            Id = 2,
                            SectorName = "Application Testing and Quality Assurance"
                        },
                        new
                        {
                            Id = 3,
                            SectorName = "Applications Architect"
                        },
                        new
                        {
                            Id = 4,
                            SectorName = "Automation Tester"
                        },
                        new
                        {
                            Id = 5,
                            SectorName = "Azure Developer"
                        },
                        new
                        {
                            Id = 6,
                            SectorName = "Big Data Developer"
                        },
                        new
                        {
                            Id = 7,
                            SectorName = "Business Analyst"
                        },
                        new
                        {
                            Id = 8,
                            SectorName = "Business Integration Specialist"
                        },
                        new
                        {
                            Id = 9,
                            SectorName = "Business Intelligence Analyst"
                        },
                        new
                        {
                            Id = 10,
                            SectorName = "Change Management Consultant"
                        },
                        new
                        {
                            Id = 11,
                            SectorName = "Cyber Security Designer"
                        },
                        new
                        {
                            Id = 12,
                            SectorName = "Data Conversion Specialist"
                        },
                        new
                        {
                            Id = 13,
                            SectorName = "Database Administrator"
                        },
                        new
                        {
                            Id = 14,
                            SectorName = "Database Administrator(Azure Cloud Exp)"
                        },
                        new
                        {
                            Id = 15,
                            SectorName = "Desktop Specialist"
                        },
                        new
                        {
                            Id = 16,
                            SectorName = "DevOps Engineer"
                        },
                        new
                        {
                            Id = 17,
                            SectorName = "Dot Net Programmer"
                        },
                        new
                        {
                            Id = 18,
                            SectorName = "EDL Analyst"
                        },
                        new
                        {
                            Id = 19,
                            SectorName = "Enterprise Architect"
                        },
                        new
                        {
                            Id = 20,
                            SectorName = "ERP Technical Analyst"
                        },
                        new
                        {
                            Id = 21,
                            SectorName = "ETL Developer"
                        },
                        new
                        {
                            Id = 22,
                            SectorName = "Event Coordinator"
                        },
                        new
                        {
                            Id = 23,
                            SectorName = "Field Test Engineer"
                        },
                        new
                        {
                            Id = 24,
                            SectorName = "Front End Developer"
                        },
                        new
                        {
                            Id = 25,
                            SectorName = "Full Stack Developer"
                        },
                        new
                        {
                            Id = 26,
                            SectorName = "Helpdesk Analyst"
                        },
                        new
                        {
                            Id = 27,
                            SectorName = "IBM Integration Designer"
                        },
                        new
                        {
                            Id = 28,
                            SectorName = "Informatica Developer"
                        },
                        new
                        {
                            Id = 29,
                            SectorName = "Information Architect"
                        },
                        new
                        {
                            Id = 30,
                            SectorName = "Infrastructure Integration Specialist"
                        },
                        new
                        {
                            Id = 31,
                            SectorName = "Integration Architect"
                        },
                        new
                        {
                            Id = 32,
                            SectorName = "IT Technical Support Specialist"
                        },
                        new
                        {
                            Id = 33,
                            SectorName = "IVR Developer"
                        },
                        new
                        {
                            Id = 34,
                            SectorName = "Java Developer"
                        },
                        new
                        {
                            Id = 35,
                            SectorName = "Legal Assistant"
                        },
                        new
                        {
                            Id = 36,
                            SectorName = "Mainframe Tester - Developer"
                        },
                        new
                        {
                            Id = 37,
                            SectorName = "Management Consultant"
                        },
                        new
                        {
                            Id = 38,
                            SectorName = "Middleware Specialist"
                        },
                        new
                        {
                            Id = 39,
                            SectorName = "Network Engineer"
                        },
                        new
                        {
                            Id = 40,
                            SectorName = "OPS Docs – Architect"
                        },
                        new
                        {
                            Id = 41,
                            SectorName = "Oracle Database Administrator"
                        },
                        new
                        {
                            Id = 42,
                            SectorName = "Oracle EBS Functional"
                        },
                        new
                        {
                            Id = 43,
                            SectorName = "Oracle EBS Project Manager"
                        },
                        new
                        {
                            Id = 44,
                            SectorName = "Oracle EBS Supply Chain Functional Lead"
                        },
                        new
                        {
                            Id = 45,
                            SectorName = "Oracle EBS Technical "
                        },
                        new
                        {
                            Id = 46,
                            SectorName = "Oracle EDI Consultant"
                        },
                        new
                        {
                            Id = 47,
                            SectorName = "Oracle SCM Techno Functional"
                        },
                        new
                        {
                            Id = 48,
                            SectorName = "Organizational Analyst"
                        },
                        new
                        {
                            Id = 49,
                            SectorName = "Portfolio Manager"
                        },
                        new
                        {
                            Id = 50,
                            SectorName = "Power BI Developer"
                        },
                        new
                        {
                            Id = 51,
                            SectorName = "Privacy Impact Analyst"
                        },
                        new
                        {
                            Id = 52,
                            SectorName = "Procurement Specialist"
                        },
                        new
                        {
                            Id = 53,
                            SectorName = "Program Manager"
                        },
                        new
                        {
                            Id = 54,
                            SectorName = "Programmer Analyst"
                        },
                        new
                        {
                            Id = 55,
                            SectorName = "Programmer Developer"
                        },
                        new
                        {
                            Id = 56,
                            SectorName = "Project Manager - Leader"
                        },
                        new
                        {
                            Id = 57,
                            SectorName = "Rave Medidata Business Analysts and Rave Medidata Project Manager"
                        },
                        new
                        {
                            Id = 58,
                            SectorName = "Receptionist"
                        },
                        new
                        {
                            Id = 59,
                            SectorName = "Revenue Assurance Analyst"
                        },
                        new
                        {
                            Id = 60,
                            SectorName = "Salesforce Architect"
                        },
                        new
                        {
                            Id = 61,
                            SectorName = "Salesforce Developer"
                        },
                        new
                        {
                            Id = 62,
                            SectorName = "SAP Project Manager"
                        },
                        new
                        {
                            Id = 63,
                            SectorName = "SAS Developer"
                        },
                        new
                        {
                            Id = 64,
                            SectorName = "Scrum Master"
                        },
                        new
                        {
                            Id = 65,
                            SectorName = "Security Architect"
                        },
                        new
                        {
                            Id = 66,
                            SectorName = "Selenium Automation Tester"
                        },
                        new
                        {
                            Id = 67,
                            SectorName = "Senior Business Analyst"
                        },
                        new
                        {
                            Id = 68,
                            SectorName = "Senior Cloud Developer - AWS"
                        },
                        new
                        {
                            Id = 69,
                            SectorName = "Senior Consultant - Digital Marketing"
                        },
                        new
                        {
                            Id = 70,
                            SectorName = "Senior Data Modeler - Data Analyst"
                        },
                        new
                        {
                            Id = 71,
                            SectorName = "Senior Project Manager"
                        },
                        new
                        {
                            Id = 72,
                            SectorName = "Server Analyst"
                        },
                        new
                        {
                            Id = 73,
                            SectorName = "Server Developer"
                        },
                        new
                        {
                            Id = 74,
                            SectorName = "ServiceNow BA"
                        },
                        new
                        {
                            Id = 75,
                            SectorName = "ServiceNow Developer"
                        },
                        new
                        {
                            Id = 76,
                            SectorName = "SharePoint Specialist"
                        },
                        new
                        {
                            Id = 77,
                            SectorName = "Siebel Consultant"
                        },
                        new
                        {
                            Id = 78,
                            SectorName = "Software Developer"
                        },
                        new
                        {
                            Id = 79,
                            SectorName = "Solution Architect"
                        },
                        new
                        {
                            Id = 80,
                            SectorName = "Solutions Designer"
                        },
                        new
                        {
                            Id = 81,
                            SectorName = "Splunk Developer"
                        },
                        new
                        {
                            Id = 82,
                            SectorName = "Sr.Data Modeler - Data Analyst"
                        },
                        new
                        {
                            Id = 83,
                            SectorName = "SQL Database Administrator"
                        },
                        new
                        {
                            Id = 84,
                            SectorName = "System Administrator"
                        },
                        new
                        {
                            Id = 85,
                            SectorName = "Systems Analyst"
                        },
                        new
                        {
                            Id = 86,
                            SectorName = "Task Based - IT Consultant"
                        },
                        new
                        {
                            Id = 87,
                            SectorName = "Technical Analyst"
                        },
                        new
                        {
                            Id = 88,
                            SectorName = "Technical Architect"
                        },
                        new
                        {
                            Id = 89,
                            SectorName = "Technical Business Analyst"
                        },
                        new
                        {
                            Id = 90,
                            SectorName = "Technical Lead - Senior Software Developer"
                        },
                        new
                        {
                            Id = 91,
                            SectorName = "Technical Specialist"
                        },
                        new
                        {
                            Id = 92,
                            SectorName = "Technology Architect"
                        },
                        new
                        {
                            Id = 93,
                            SectorName = "Training Specialist"
                        },
                        new
                        {
                            Id = 94,
                            SectorName = "Web Developer"
                        },
                        new
                        {
                            Id = 95,
                            SectorName = "Web Service Analyst"
                        },
                        new
                        {
                            Id = 96,
                            SectorName = "Web Specialist"
                        },
                        new
                        {
                            Id = 97,
                            SectorName = "Wi-Fi Expert"
                        },
                        new
                        {
                            Id = 98,
                            SectorName = "UX designer"
                        });
                });

            modelBuilder.Entity("SMSS.Models.SectorJobCount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("JobCount")
                        .HasColumnType("int")
                        .HasColumnName("Job_Count");

                    b.Property<string>("SectorName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Sector_Name");

                    b.ToView("V_Sector_Job_Count");
                });

            modelBuilder.Entity("SMSS.Models.UnsubscribeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnsubscribeReasons")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnsubscribeUsers");
                });

            modelBuilder.Entity("SMSS.Models.UserSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RegisteredUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<int>("SectorId")
                        .HasColumnType("int")
                        .HasColumnName("Sector_ID");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredUserId");

                    b.HasIndex("SectorId");

                    b.ToTable("UserSectors", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SMSS.Models.RegisteredUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SMSS.Models.RegisteredUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSS.Models.RegisteredUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SMSS.Models.RegisteredUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMSS.Models.ApplicantEducation", b =>
                {
                    b.HasOne("SMSS.Models.ApplicantProfile", "ApplicantProfile")
                        .WithMany("ApplicantEducations")
                        .HasForeignKey("ApplicantProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantProfile");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantJobApplication", b =>
                {
                    b.HasOne("SMSS.Models.ApplicantProfile", "ApplicantProfile")
                        .WithMany("ApplicantJobApplications")
                        .HasForeignKey("ApplicantProfileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SMSS.Models.CompanyJob", "CompanyJob")
                        .WithMany("ApplicantJobApplications")
                        .HasForeignKey("CompanyJobId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicantProfile");

                    b.Navigation("CompanyJob");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantProfile", b =>
                {
                    b.HasOne("SMSS.Models.City", "City")
                        .WithMany("ApplicantProfiles")
                        .HasForeignKey("CityId");

                    b.HasOne("SMSS.Models.Country", "Country")
                        .WithMany("ApplicantProfiles")
                        .HasForeignKey("CountryId");

                    b.HasOne("SMSS.Models.Province", "Province")
                        .WithMany("ApplicantProfiles")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("SMSS.Models.RegisteredUser", "RegisteredUser")
                        .WithOne("ApplicantProfile")
                        .HasForeignKey("SMSS.Models.ApplicantProfile", "RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Province");

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantSkill", b =>
                {
                    b.HasOne("SMSS.Models.ApplicantProfile", "ApplicantProfile")
                        .WithMany("ApplicantSkills")
                        .HasForeignKey("ApplicantProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantProfile");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantTestimonial", b =>
                {
                    b.HasOne("SMSS.Models.ApplicantProfile", "ApplicantProfile")
                        .WithMany("ApplicantTestimonials")
                        .HasForeignKey("ApplicantProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantProfile");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantWorkHistory", b =>
                {
                    b.HasOne("SMSS.Models.ApplicantProfile", "ApplicantProfile")
                        .WithMany("ApplicantWorkHistorys")
                        .HasForeignKey("ApplicantProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantProfile");
                });

            modelBuilder.Entity("SMSS.Models.City", b =>
                {
                    b.HasOne("SMSS.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SMSS.Models.CompanyJob", b =>
                {
                    b.HasOne("SMSS.Models.City", "City")
                        .WithMany("CompanyJobs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SMSS.Models.CompanyProfile", "CompanyProfile")
                        .WithMany("CompanyJobs")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSS.Models.Country", "Country")
                        .WithMany("CompanyJobs")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SMSS.Models.JobMode", "JobMode")
                        .WithMany("CompanyJobs")
                        .HasForeignKey("JobModeId");

                    b.HasOne("SMSS.Models.ProvinceDemoFileAttachment", "ProvinceDemoFileAttachment")
                        .WithMany("CompanyJobs")
                        .HasForeignKey("ProvinceDemoFileAttachmentId");

                    b.HasOne("SMSS.Models.Province", "Province")
                        .WithMany("CompanyJobs")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CompanyProfile");

                    b.Navigation("Country");

                    b.Navigation("JobMode");

                    b.Navigation("Province");

                    b.Navigation("ProvinceDemoFileAttachment");
                });

            modelBuilder.Entity("SMSS.Models.CompanyJobSector", b =>
                {
                    b.HasOne("SMSS.Models.CompanyJob", "CompanyJob")
                        .WithMany("CompanyJobSectors")
                        .HasForeignKey("CompanyJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSS.Models.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyJob");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("SMSS.Models.CompanyLocation", b =>
                {
                    b.HasOne("SMSS.Models.City", "City")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SMSS.Models.CompanyProfile", "CompanyProfile")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSS.Models.Country", "Country")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SMSS.Models.Province", "Province")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CompanyProfile");

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SMSS.Models.CompanyProfile", b =>
                {
                    b.HasOne("SMSS.Models.RegisteredUser", "RegisteredUser")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("SMSS.Models.CompanyProfile", "RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("SMSS.Models.Province", b =>
                {
                    b.HasOne("SMSS.Models.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SMSS.Models.UserSector", b =>
                {
                    b.HasOne("SMSS.Models.RegisteredUser", "registeredUser")
                        .WithMany("UserSectors")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMSS.Models.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");

                    b.Navigation("registeredUser");
                });

            modelBuilder.Entity("SMSS.Models.ApplicantProfile", b =>
                {
                    b.Navigation("ApplicantEducations");

                    b.Navigation("ApplicantJobApplications");

                    b.Navigation("ApplicantSkills");

                    b.Navigation("ApplicantTestimonials");

                    b.Navigation("ApplicantWorkHistorys");
                });

            modelBuilder.Entity("SMSS.Models.City", b =>
                {
                    b.Navigation("ApplicantProfiles");

                    b.Navigation("CompanyJobs");

                    b.Navigation("CompanyLocations");
                });

            modelBuilder.Entity("SMSS.Models.CompanyJob", b =>
                {
                    b.Navigation("ApplicantJobApplications");

                    b.Navigation("CompanyJobSectors");
                });

            modelBuilder.Entity("SMSS.Models.CompanyProfile", b =>
                {
                    b.Navigation("CompanyJobs");

                    b.Navigation("CompanyLocations");
                });

            modelBuilder.Entity("SMSS.Models.Country", b =>
                {
                    b.Navigation("ApplicantProfiles");

                    b.Navigation("CompanyJobs");

                    b.Navigation("CompanyLocations");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("SMSS.Models.JobMode", b =>
                {
                    b.Navigation("CompanyJobs");
                });

            modelBuilder.Entity("SMSS.Models.Province", b =>
                {
                    b.Navigation("ApplicantProfiles");

                    b.Navigation("Cities");

                    b.Navigation("CompanyJobs");

                    b.Navigation("CompanyLocations");
                });

            modelBuilder.Entity("SMSS.Models.ProvinceDemoFileAttachment", b =>
                {
                    b.Navigation("CompanyJobs");
                });

            modelBuilder.Entity("SMSS.Models.RegisteredUser", b =>
                {
                    b.Navigation("ApplicantProfile");

                    b.Navigation("CompanyProfile");

                    b.Navigation("UserSectors");
                });
#pragma warning restore 612, 618
        }
    }
}
